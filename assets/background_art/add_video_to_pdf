#!/bin/bash
#
# This script is used to overlay a video in frames to a pdf file.
# The video should have a white background.
#
# Usage: ./overal.sh video_file input.pdf output.pdf
#
if [ "$#" -ne 4 ]; then
  echo "Usage: $0 video_file input.pdf output.pdf startPage"
  exit 1
fi

videoFile=$1
inputPdf=$2
outputPdf=$3
startPage=$4

# get number of pages of input pdf and reduce it by startPage
nb_images=$(pdfinfo $inputPdf | grep Pages | awk '{print $2}')
nb_images=$(($nb_images - $startPage + 1))


# compute rate such that we have cover the entire duration of the video with
# nb_images
duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 $videoFile)
rate=$(echo "scale=2; $nb_images / ( $duration * 2 )" | bc)

echo "Extracting frames from video $videoFile with rate $rate"

# run ffmpeg without verbose
ffmpeg -i $videoFile -loglevel error -r ${rate} frame_%4d.png
images=($(ls frame_*.png))

n=${#images[@]}


for i in $(seq 1 $n); do
  # First get image name without the extension
  image_name=$(echo ${images[$i-1]} | cut -f 1 -d '.')
  # Crop the image
  #convert ${image_name}.png -crop 180x180+100+150 ${image_name}_crop.png
  #convert ${image_name}.png ${image_name}_crop.png
  #convert ${image_name}.png -resize 180x ${image_name}_crop.png
  convert ${image_name}.png ${image_name}_crop.png

done

croped_images=($(ls frame_*crop.png))
python3 add_image_to_pdf.py $inputPdf $outputPdf $startPage ${croped_images[@]}
rm ${croped_images[@]}
rm ${images[@]}


